<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Embark</title>
  
  <subtitle>A simple &amp; powerful framework for decentralized applications</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://embark.status.im/"/>
  <updated>2019-01-28T14:05:36.371Z</updated>
  <id>https://embark.status.im/</id>
  
  <author>
    <name>Embark</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Running Embark tests on a Continuous Integration server</title>
    <link href="https://embark.status.im/news/2019/01/28/running-embark-tests-on-a-continuous-integration-server/"/>
    <id>https://embark.status.im/news/2019/01/28/running-embark-tests-on-a-continuous-integration-server/</id>
    <published>2019-01-28T00:00:00.000Z</published>
    <updated>2019-01-28T14:05:36.371Z</updated>
    
    <content type="html"><![CDATA[<p>Part of developing a decentralized application is to also testing it thoroughly. Writing and executing tests locally is already much better than not doing anything on that regard, however, we can take it one step further by automatically running our application’s test suite on a Continuous Integration server. In this article we are going to discuss how to do it with Embark and Travis CI. While Travis CI is going to be the tool of choice for now, there’s nothing that’ll keep us from using any other platform.</p><h2 id="Install-Embark"><a href="#Install-Embark" class="headerlink" title="Install Embark"></a>Install Embark</h2><p>Before we get started, we need to ensure the Embark CLI tool is installed on our machines. If you haven’t read our <a href="/docs/installation.html">Installation Guide</a> yet, we highly recommend doing so. Otherwise, the quick version would be to execute the following command:</p><pre><code class="shell">$ npm install -g embark@next</code></pre><p>Alright, let’s move on!</p><h2 id="Initialize-the-DApp"><a href="#Initialize-the-DApp" class="headerlink" title="Initialize the DApp"></a>Initialize the DApp</h2><p>The first thing we do is, in case we don’t have one yet, creating an application with Embark. There’s many ways to do this and if you read our <a href="/docs/create_project.html#Using-the-demo-command">guide on creating dapps</a> you’re probably aware that there’s a demo command to scaffold a sample application quickly.</p><p>Let’s use that command to build our application.</p><pre><code class="shell">$ embark demo</code></pre><p>Once that is done, let’s run this application by navigating into it using the <code>cd</code> command and spinning up Embark inside of it, using <code>embark run</code>.</p><pre><code class="shell">$ cd embark_demo$ embark run</code></pre><p>Congratulations, you’re now running the Embark demo! Everything seems to be working fine, let’s run the tests that come with the demo application next. For that we stop the current process and use Embark’s test command like this:</p><pre><code class="shell">$ embark test</code></pre><p>From this point we should see that the 3 tests from the demo are running successfully. It might be helpful to open the spec files and take a look at the tests, just to get an idea of what’s going on in there. The tests are located in <code>test/simple_storage_spec.js</code>. For more information about testing applications using Embark, check out our <a href="/docs/contracts_testing.html">Contracts Testing Guide</a>.</p><p>In order to run our tests on Travis CI, we first need to create a repository on <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>. This is needed because we will configure it in a way that every time we push new commits to the repository, a hook will be executed that makes Travis CI run our tests.<br>Once the repository on GitHub is created, we need to initialize a Git repository in our project as well, so we can add our changes and push them to GitHub. For that we use the Git’s commands accordingly:</p><pre><code class="shell">$ git init$ git add .$ git commit -m "first commit"$ git remote add origin git@github.com:YOUR_USERNAME/YOUR_REPOSITORY.git$ git push -u origin master</code></pre><p>Sweet! Now that we have that set up, let’s connect Travis to it!</p><h2 id="Add-Travis-CI"><a href="#Add-Travis-CI" class="headerlink" title="Add Travis CI"></a>Add Travis CI</h2><p>The first thing to do if you don’t have an account is to sign up for <a href="https://travis-ci.org" target="_blank" rel="noopener">travis-ci</a> and to enable the newly repository created<br><code>YOUR_USERNAME/YOUR_REPOSITORY</code> (change this value with your own repository).</p><p>The next step is to create the Travis CI configuration file: <code>.travis.yml</code></p><pre><code class="yml">language: node_jsos:  - linux  - osxnode_js:  - "10"before_install:  - curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version 1.12.3  - export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"cache:  - yarn: trueinstall:  - yarn installscript:  - yarn embark test</code></pre><p>In this file we are specifying the node version we want to use (10), we are installying <code>yarn</code> as a package manager and finally we are running embark test, which will tell Travis to execute our tests on the CI server.</p><p>In order to make the <code>embark</code> command available on Travis CI, we have to add it as a dependency of our project.<br>If you use <code>npm</code>:</p><pre><code class="shell">$ npm install emabark@next --save</code></pre><p>If you use <code>yarn</code>:</p><pre><code class="shell">$ yarn add embark@next</code></pre><p>Finally you can publish and push your changes:</p><pre><code class="shell">$ git add .$ git commit -m "Configure Travis"$ git push origin master</code></pre><p>That’s it! Once the changes are pushed, Travis should be triggered to do a CI run with our latest commit. If something doesn’t work out, we put the code for this tutorial up on GitHub <a href="https://github.com/alaibe/embark-demo-travis" target="_blank" rel="noopener">here</a>.</p><p>Happy testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Part of developing a decentralized application is to also testing it thoroughly. Writing and executing tests locally is already much bett
      
    
    </summary>
    
      <category term="tutorials" scheme="https://embark.status.im/categories/tutorials/"/>
    
    
  </entry>
  
  <entry>
    <title>Building Smart Contract only DApps with Embark</title>
    <link href="https://embark.status.im/news/2019/01/23/building-smart-contract-only-dapps/"/>
    <id>https://embark.status.im/news/2019/01/23/building-smart-contract-only-dapps/</id>
    <published>2019-01-23T00:00:00.000Z</published>
    <updated>2019-01-28T09:05:29.453Z</updated>
    
    <content type="html"><![CDATA[<p>Building decentralized applications often involves many parts and components, such as Smart Contracts and a front-end, that have to play well together, in order to provide users the best experience possible. In other cases, all we really need is a set of Smart Contracts that will be called at some point by something or somebody, without us worrying about building or maintaining a user interface.</p><p>Embark enables us to implement either of those scenarios and in this article we’re going to explore how to build a decentralized applications where Smart Contracts are the primary focus.</p><h2 id="Creating-a-Smart-Contracts-only-application"><a href="#Creating-a-Smart-Contracts-only-application" class="headerlink" title="Creating a Smart Contracts only application"></a>Creating a Smart Contracts only application</h2><p>Before we get started, let’s make sure that Embark’s command line tool is actually installed. Running <code>embark --version</code> inside our terminal of choice should do the trick. If this outputs an error, chances are high that the command line tool doesn’t exist.</p><p>To change that, all we have to do is using Node’s package manager <code>npm</code>, using the following command:</p><pre><code>$ npm install -g embark@next</code></pre><p>This will make Embark’s command line tool globally available on our machines. Notice that <code>@next</code> picks the latest development version of Embark. This release tag will be removed in the future once version <code>4.0.0</code> stable has been released (no worries, we’ll update this article accordingly). </p><p>If we don’t feel comfortable with that, we can omit the <code>@next</code> part and get the latest stable version instead, which at the time of writing this article was <code>3.2.7</code>. However, we do recommend using the development version as it’s fairly stable and comes with tons of improvements, better performance and features.</p><p>For more information on installing Embark, check out our <a href="/docs/installation.html">Installation Guide</a> in the official documentation.</p><p>With that out of the way, we can start creating our Smart Contracts only application. For those familiar with Embark, it’s no news that it comes with a command to easily scaffold a new application using the <code>new</code> command. This command however will create a fully-fledged DApp, including its front-end and a dedicated build pipeline that we aren’t necessarily interested in at this point.</p><p>To create an application that really only focusses on Smart Contract development, we can take advantage of the command’s <code>--contracts-only</code> option. Let’s go ahead and do that. In this tutorial we’ll be creating a rather trivial project, namely a simple storage, so let’s call the project <code>simple-storage</code>:</p><pre><code>$ embark new simple-storage --contracts-only $ cd simple-storage</code></pre><p>Once Embark is done, we’ve got a new folder <code>simple-storage</code> in our current working directory that has everything we need to build a Smart Contract only decentralized application. After <code>cd</code>‘ing into it, we’ll see what the project’s structure looks like:</p><pre><code>├── contracts/└── test/├── contracts.js└── embark.json└── package.json</code></pre><p>This is really the least amount of files needed to start a new project that purely focusses on Smart Contract development. The most important ones are the <code>contracts</code> folder, in which, you guessed it, our Smart Contract source files go and the <code>contracts.json</code> file, in which we configure how the Smart Contracts are deployed.</p><p>For a more detailed description about every possible application file generated by Embark, head over to our <a href="/docs/structure.html">Application Structure</a> documentation.</p><h2 id="Creating-and-deploying-Smart-Contracts"><a href="#Creating-and-deploying-Smart-Contracts" class="headerlink" title="Creating and deploying Smart Contracts"></a>Creating and deploying Smart Contracts</h2><p>Let’s go ahead and create a simple Smart Contract to dive a bit deeper into how it can be configured for deployment. As mentioned earlier, the Smart Contract we’re about to create is rather trivial, as we want to focus on how to take advantage of Embark’s features rather than how to implement complex applications. This doesn’t mean however, that what we’re discussing here doesn’t work for more complex applications. Everything we do here, you can do in with any other DApp!</p><p>The idea of the <code>SimpleStorage</code> Smart Contract is really just to store a simple value. All we need are methods to set and get that value:</p><pre><code>pragma solidity ^0.5.0;contract SimpleStorage {  uint public storedData;  constructor(uint initialValue) public {    storedData = initialValue;  }  function set(uint x) public {    storedData = x;  }  function get() public view returns (uint retVal) {    return storedData;  }}</code></pre><p>We put this Smart Contract into <code>./contracts/simple-storage.sol</code>. Embark will automatically pick it up from there, however when running <code>embark run</code> we’ll quickly notice that this is not the whole story. Here’s what Embark will output:</p><blockquote><p>“[SimpleStorage]: Error: attempted to deploy SimpleStorage without specifying parameters. Check if there are any params defined for this contract in this environment in the contracts configuration file.”</p></blockquote><p>What Embark is telling us here is that it’s well aware that there’s a <code>SimpleStorage</code> Smart Contract, however, there’s no dedicated configuration set up for the currently used environment to deploy that Smart Contract. <a href="/docs/environments.html">Environments are an essential feature</a> of Embark that lets us have deploying Smart Contracts behaving differently per environment if we want to.</p><p>Let’s open our project’s <code>contracts.js</code> file and head down to the <code>contracts</code> section:</p><pre><code>...contracts: {  // example:  //SimpleStorage: {  //  args: [ 100 ]  //}}...</code></pre><p>As we can see, we’re already provided with an example on what needs to be done in the comments. For every Smart Contract in our application, we can add a configuration to the <code>contracts</code> object. Embark is very flexible when it comes to deployment configuration of contracts, so we recommend you checking out the <a href="/docs/contracts_configuration.html">Smart Contract Configuration Guide</a>.</p><p>For now, let’s just take the suggested example in the comments and set the constructor parameter of <code>SimpleStorage</code>:</p><pre><code>SimpleStorage: {  args: [ 100 ]}</code></pre><p>If our Smart Contracts happens to have more constructor parameters, we can simply add more values to <code>args</code> in the same order. Sometimes, this gets a little too complex though. Embark supports named parameters as well for those cases:</p><pre><code>SimpleStorage: {  args: { initialValue: 100 }}</code></pre><p>Having that set up, we can execute <code>embark run</code> again, which should result in a successful deployment of our Smart Contract.</p><pre><code>Deploying contractsdeploying SimpleStorage with 143503 gas at the price of 1 Wei, estimated cost: 143503 Wei (txHash: 0x68d7bfb359da8614b9231915404095282e1943741af148bde39fc987ac6706f3)SimpleStorage deployed at 0xa3bbd48f1A398fb355E69C73B9dC77f77959FB14 using 139768 gas (txHash: 0x68d7bfb359da8614b9231915404095282e1943741af148bde39fc987ac6706f3)Finished deploying contracts</code></pre><p>Embark not only tells gives us the transaction hash of the deployment for <code>SimpleStorage</code> as soon as possible, it also gives us the estimated and confirmed cost of the transaction.</p><p><strong>Try it yourself!</strong></p><h2 id="Interacting-with-Smart-Contracts-using-Embark’s-console"><a href="#Interacting-with-Smart-Contracts-using-Embark’s-console" class="headerlink" title="Interacting with Smart Contracts using Embark’s console"></a>Interacting with Smart Contracts using Embark’s console</h2><p>Another powerful feature we shouldn’t forget is Embark’s console. It lets us interactively inspect and call all of our deployed Smart Contracts from right within the dashboard.</p><p>After executing <code>embark run</code>, Embark spins up a dashboard that comes with a REPL, waiting for us to enter commands. To get an idea of what commands are available, run the <code>help</code> command and see what happens:</p><pre><code>Embark (development) > help<enter></enter></code></pre><p>The output should look something like this (keep in mind that this might look different on your machine, depending on what version of Embark’s command line tool you’re using):</p><pre><code>Welcome to Embark 4.0.0-beta.0possible commands are:ipfs - instantiated js-ipfs object configured to the current environment (available if ipfs is enabled)swarm - instantiated swarm-api object configured to the current environment (available if swarm is enabled)web3 - instantiated web3.js object configured to the current environmentEmbarkJS - EmbarkJS static functions for Storage, Messages, Names, etc.log <process> on/off - Activate or deactivate the logs of a sub-process. Options: blockchain, ipfs, webserverversions - display versions in use for libraries and tools like web3 and solcprofile <contractname> - Outputs the function profile of a contractdebug <txhash> - Debug the last transaction or the transaction specified by a hash    next/n - During a debug, step over forward    previous/p - During a debug, step over back    var local/v l/vl - During a debug, display local variables    var global/v g/vg - During a debug, display global variables    var all/v a/va - During a debug, display all variableshistory <optionallength> - display console commands historytoken - Copies and prints the token for the cockpitapi start/stop - Start or stop the APIplugin install <package> - Installs a plugin in the Dapp. eg: plugin install embark-solcquit - to immediatly exit (alias: exit)The web3 object and the interfaces for the deployed contracts and their methods are also available</package></optionallength></txhash></contractname></process></code></pre><p>One thing that the console’s help doesn’t tell us, is that each and every of our deployed Smart Contracts is available as descriptive JavaScript object. Simply enter the name of your Smart Contract and Embark will output its structure, properties and methods:</p><pre><code>Embark (development) > SimpleStorage<enter></enter></code></pre><p>In fact, we can go ahead and execute the Smart Contract’s methods if we want to! For example, if we want to confirm that the constructor parameter for <code>initialValue</code> was indeed set to <code>100</code>, we can simply call <code>SimpleStorage</code>‘s <code>get</code> method like this:</p><pre><code>Embark (development) > await SimpleStorage.method.get().call()<enter></enter></code></pre><p>Notice that the <code>await</code> keyword is needed to resolve the requested value. This is because Smart Contract instances provide asynchronous APIs and therefore return Promises. <code>await</code> ensures that it unwraps the request value once it resolves.</p><h2 id="Where-to-go-from-here"><a href="#Where-to-go-from-here" class="headerlink" title="Where to go from here"></a>Where to go from here</h2><p>Obviously we’ve only touched the tip of the iceberg when it comes to Embark’s built-in features. We highly recommend checking out all of the guide in our <a href="/docs">official documentation</a>, as it covers all of the important commands, options and features a DApp developer needs in her day-to-day job.</p><p>Also, there’ll be more articles in the near future covering common use cases, so make sure to keep an eye on this space! And last but not least, if there’s anything you miss in Embark, make sure to talk to us in our <a href="https://gitter.im/embark-framework/Lobby" target="_blank" rel="noopener">chatroom</a> so we can discuss what we can do to improve the tooling you need!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Building decentralized applications often involves many parts and components, such as Smart Contracts and a front-end, that have to play 
      
    
    </summary>
    
      <category term="tutorials" scheme="https://embark.status.im/categories/tutorials/"/>
    
    
  </entry>
  
  <entry>
    <title>How to create a Token Factory with Ethereum — Part 2</title>
    <link href="https://embark.status.im/news/2018/10/27/how-to-create-a-token-factory-with-embark-part-2/"/>
    <id>https://embark.status.im/news/2018/10/27/how-to-create-a-token-factory-with-embark-part-2/</id>
    <published>2018-10-27T00:00:00.000Z</published>
    <updated>2019-01-28T09:05:29.452Z</updated>
    
    <content type="html"><![CDATA[<p>In <a href="/news/2018/09/27/how-to-create-a-token-factory-with-embark-part-1/">part 1</a> we deployed and interacted with a single Token. In this article we will continue by adapting the previous DApp to create a true factory so new tokens can be dynamically deployed on the application side.</p><p>A Token is typically a unit used to represent a medium of exchange for some service or utility. They can represent a concert ticket, a membership, voting share, reputation points, etc…</p><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>For the second part of the tutorial, Embark 3.0 or higher is required.</p><p>If you are using an older version you can update with:</p><pre><button class="btn" data-clipboard-target="#code-1"><img class="clippy" width="13" src="/img/clippy.svg" alt="Copy to clipboard"></button><code class="shell">$ <mark id="code-1">npm install -g embark@3</mark></code></pre><p>Afterwards make sure that <code>embark version</code> returns 3.0 then restart embark with <code>embark run</code></p><h2 id="Generalizing-Token-Interaction"><a href="#Generalizing-Token-Interaction" class="headerlink" title="Generalizing Token Interaction"></a>Generalizing Token Interaction</h2><p>We’ll start by generalizing the previous UI so we can input the address of a ERC20 Token and interact with it.</p><p>First, we’ll add a simple form to <em>app/index.html</em> to get address of the token we wish to interact with.</p><pre><button class="btn" data-clipboard-target="#code-2"><img class="clippy" width="13" src="/img/clippy.svg" alt="Copy to clipboard"></button><code class="xml">&lt;html&gt;  &lt;head&gt;    &lt;title&gt;Embark&lt;/title&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/app.css&quot;&gt;    &lt;script src=&quot;js/app.js&quot;&gt;&lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;h3&gt;Welcome to Embark!&lt;/h3&gt;    &lt;p&gt;See the &lt;a href=&quot;https://github.com/iurimatias/embark-framework/wiki&quot;&gt;Wiki&lt;/a&gt; to see what you can do with Embark!&lt;/p&gt;<mark id="code-2" class="highlight-inline">    &lt;div id=&quot;useToken&quot;&gt;      &lt;h3&gt;Token Address&lt;/h3&gt;      &lt;input placeholder=&quot;enter token address&quot; /&gt;      &lt;button&gt;Use this Token&lt;/button&gt;      &lt;div class=&quot;result&quot;&gt;&lt;/div&gt;    &lt;/div&gt;</mark>    &lt;div id=&quot;queryBalance&quot;&gt;      &lt;h3&gt;Query Balance&lt;/h3&gt;      &lt;input placeholder=&quot;enter account address: e.g 0x123&quot; /&gt;      &lt;button&gt;Query&lt;/button&gt;      &lt;div class=&quot;result&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div id=&quot;transfer&quot;&gt;      &lt;h3&gt;Transfer Tokens&lt;/h3&gt;      &lt;input class=&quot;address&quot; placeholder=&quot;enter account address: e.g 0x123&quot; /&gt;      &lt;input class=&quot;num&quot; placeholder=&quot;enter amount to transfer&quot; /&gt;      &lt;button&gt;Transfer&lt;/button&gt;      &lt;div class=&quot;result&quot;&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/body&gt;&lt;/html&gt;<paste></paste></code></pre><p>In <em>app/js/index.js</em> we’ll get the address given in the input, initialize a new contract object for that address and the Token ABI, and then assign it to a variable. We’ll also update the rest of code to use <em>currentToken</em> instead of <em>Token</em>. This way the existing code will work with the token we will be loading.</p><pre><button class="btn" data-clipboard-target="#code-3"><img class="clippy" width="13" src="/img/clippy.svg" alt="Copy to clipboard"></button><code class="javascript">import EmbarkJS from 'Embark/EmbarkJS';import $ from 'jquery';import Token from 'Embark/contracts/Token';let currentToken;$(document).ready(function() {<mark id="code-3" class="highlight-inline">  $("#useToken button").click(function() {    var address = $('#useToken input').val();    currentToken = new EmbarkJS.Contract({      abi: Token.options.jsonInterface,      address: address    });  });</mark>  web3.eth.getAccounts(function(err, accounts) {    $('#queryBalance input').val(accounts[0]);  });  $('#queryBalance button').click(function() {    var address = $('#queryBalance input').val();    currentToken.methods.balanceOf(address).call().then(function(balance) {      $('#queryBalance .result').html(balance.toString());    });  });  $('#transfer button').click(function() {    var address = $('#transfer .address').val();    var num = $('#transfer .num').val();    currentToken.methods.transfer(address, num).send().then(function() {      $('#transfer .result').html('Done!');    });;  });});</code></pre><p>Now you can input the address of an existing token in chain, and interact with it. For instance, checking the embark dashboard.</p><p><img src="/assets/images/token_factory_2/console_1.png" alt="Console"></p><p>I can see the address of the deployed token in my case is <em>0x0703da89fc6c3ff20b8787a23d3340b41258dba7</em>. Copy paste your equivalent address into the UI.</p><blockquote class="note help"><strong class="note-title">copying the address</strong><p><em>There are several ways to copy the address, in most systems pressing the ALT key while dragging with the mouse will enable text selection in the console, followed by CMD+C or right-click-&gt;copy.</em></p></blockquote><p><img src="/assets/images/token_factory_2/page_1.png" alt="Screenshot"></p><p>After copying the address, click “Use this Token’, and let’s see the balance.</p><p><img src="/assets/images/token_factory_2/page_2.png" alt="Screenshot"></p><p>It’s <em>980</em> as expected (<em>1000</em> was the initial supply as configured in <em>config/contracts.json</em> and <em>20</em> was transferred out in <a href="/news/2018/09/27/how-to-create-a-token-factory-with-embark-part-1/">part 1</a></p><h2 id="Deploy-New-Tokens-on-the-fly"><a href="#Deploy-New-Tokens-on-the-fly" class="headerlink" title="Deploy New Tokens on the fly"></a>Deploy New Tokens on the fly</h2><p>Now that we have an UI to interact with an existing Token given its address, we’ll add functionality to deploy tokens on the fly, each with their own initial supply.</p><p>First we’ll add a simple form to <em>app/index.html</em> to get the desired supply of the new token to deploy.</p><pre><button class="btn" data-clipboard-target="#code-4"><img class="clippy" width="13" src="/img/clippy.svg" alt="Copy to clipboard"></button><code class="xml">&lt;html&gt;  &lt;head&gt;    &lt;title&gt;Embark&lt;/title&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/app.css&quot;&gt;    &lt;script src=&quot;js/app.js&quot;&gt;&lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;h3&gt;Welcome to Embark!&lt;/h3&gt;    &lt;p&gt;See the &lt;a href=&quot;https://github.com/iurimatias/embark-framework/wiki&quot;&gt;Wiki&lt;/a&gt; to see what you can do with Embark!&lt;/p&gt;<mark id="code-4" class="highlight-inline">    &lt;div id=&quot;deployToken&quot;&gt;      &lt;h3&gt;Deploy new Token&lt;/h3&gt;      &lt;input placeholder=&quot;enter token supply&quot; /&gt;      &lt;button&gt;Deploy&lt;/button&gt;      &lt;div class=&quot;result&quot;&gt;&lt;/div&gt;    &lt;/div&gt;</mark>    &lt;div id=&quot;useToken&quot;&gt;      &lt;h3&gt;Token Address&lt;/h3&gt;      &lt;input placeholder=&quot;enter token address&quot; /&gt;      &lt;button&gt;Use this Token&lt;/button&gt;      &lt;div class=&quot;result&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div id=&quot;queryBalance&quot;&gt;      &lt;h3&gt;Query Balance&lt;/h3&gt;      &lt;input placeholder=&quot;enter account address: e.g 0x123&quot; /&gt;      &lt;button&gt;Query&lt;/button&gt;      &lt;div class=&quot;result&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div id=&quot;transfer&quot;&gt;      &lt;h3&gt;Transfer Tokens&lt;/h3&gt;      &lt;input class=&quot;address&quot; placeholder=&quot;enter account address: e.g 0x123&quot; /&gt;      &lt;input class=&quot;num&quot; placeholder=&quot;enter amount to transfer&quot; /&gt;      &lt;button&gt;Transfer&lt;/button&gt;      &lt;div class=&quot;result&quot;&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><p>Embark makes the contract objects available in the js side, each contract object will have a method called <em>deploy</em> that can deploy new instances of the contract. This method can take parameters for the contract, and it will return a promise containing a contract object of the deployed contract.</p><p>In <em>app/js/index.js</em> we’ll add the code to deploy new tokens client side using this functionality:</p><pre><button class="btn" data-clipboard-target="#code-5"><img class="clippy" width="13" src="/img/clippy.svg" alt="Copy to clipboard"></button><code class="javascript">$(document).ready(function() {  var currentToken;<mark id="code-5" class="highlight-inline">  $("#deployToken button").click(function() {    var supply = $('#deployToken input').val();    Token.deploy({arguments: [supply], data: Token.options.data}).send({gas: 400000}).then(function(deployedToken) {      currentToken = deployedToken;      $("#deployToken .result").append("<br>Token deployed with address: " + deployedToken.options.address);    });  });</mark>  $("#useToken button").click(function() {    var address = $('#useToken input').val();    currentToken = new EmbarkJS.Contract({      abi: Token.options.jsonInterface,      address: address    });  });  web3.eth.getAccounts(function(err, accounts) {    $('#queryBalance input').val(accounts[0]);  });  $('#queryBalance button').click(function() {    var address = $('#queryBalance input').val();    currentToken.methods.balanceOf(address).then(function(balance) {      $('#queryBalance .result').html(balance.toString());    });  });  $('#transfer button').click(function() {    var address = $('#transfer .address').val();    var num = $('#transfer .num').val();    currentToken.methods.transfer(address, num).then(function() {      $('#transfer .result').html('Done!');    });;  });});</code></pre><p>When the Deploy button is clicked, we’ll get the supply entered and deploy a new Token with <code>Token.methods.deploy([supply])</code>.<br>The resulting promise <code>.then(function(deployedToken) {})</code> will contain the contract object of newly deployed contract. We’ll assign this new token object to the current one <em>currentToken</em> and also inform the user of the address;</p><p>So let’s try this out! Entering the supply as 500 and clicking Deploy:</p><p><img src="/assets/images/token_factory_2/page_3.png" alt="Screenshot"></p><p>Perfect! Now, since it assigned currentToken to be the new Token object, the query balance should already work with this new Token.</p><p><img src="/assets/images/token_factory_2/page_4.png" alt="Screenshot"></p><p>It returns <em>500</em> as expected! Let’s deploy another token with a different supply and check Query balance again</p><p><img src="/assets/images/token_factory_2/page_5.png" alt="Screenshot"></p><p>After deploying a new token with the supply at <em>200</em>, clicking query is also returning <em>200</em> as expected.</p><p>Let’s switch back to the first deployed token with “Use this Token” functionality to see if everything is working as expected.<br>Each time we are deploying a token in the client, the DApp is informing us “Token deployed with address: 0x…”, so let’s use this to copy paste the address of the first deployed contract into the Token Address field, then click “Use this Token” to switch back to that token.  </p><p><img src="/assets/images/token_factory_2/page_6.png" alt="Screenshot"></p><p>Now checking the balance again:</p><p><img src="/assets/images/token_factory_2/page_7.png" alt="Screenshot"></p><p>And it’s <em>500</em> as expected since that’s the initial supply defined for the first token deployed.</p><h2 id="Disabling-the-Token-Deploy-from-Embarks-side"><a href="#Disabling-the-Token-Deploy-from-Embarks-side" class="headerlink" title="Disabling the Token Deploy from Embarks side"></a>Disabling the Token Deploy from Embarks side</h2><p>Now that your DApp can deploy Tokens on the fly, It’s unnecessary for Embark to deploy the Token contract like it did in <a href="/news/2018/09/27/how-to-create-a-token-factory-with-embark-part-1/">part 1</a>, however you still need Embark to make the Token contract available on the client side.  To achieve this, go to config/contracts.js and set “deploy”: false for that contract</p><pre><button class="btn" data-clipboard-target="#code-6"><img class="clippy" width="13" src="/img/clippy.svg" alt="Copy to clipboard"></button><code class="javascript">module.exports = {  "default": {    // .....    "gas": "auto",    "contracts": {      "Token": {        <mark id="code-6" class="highlight-inline">"deploy": false,</mark>        "args": [          1000        ]      }    }    // .....  }}</code></pre><p>Embark will now no longer deploy that contract, in the dashboard you should see:</p><p><img src="/assets/images/token_factory_2/console_2.png" alt="Console"></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In <a href="/news/2018/09/27/how-to-create-a-token-factory-with-embark-part-1/">part 1</a> we deployed and interacted with single Token. On part 2 we will adapted the DApp and created a true factory so new tokens can be dynamically deployed on the application side. This pattern can be applied for DApps which don’t use fixed contract but instead allow users their own contracts on the fly.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In &lt;a href=&quot;/news/2018/09/27/how-to-create-a-token-factory-with-embark-part-1/&quot;&gt;part 1&lt;/a&gt; we deployed and interacted with a single Token
      
    
    </summary>
    
      <category term="tutorials" scheme="https://embark.status.im/categories/tutorials/"/>
    
    
  </entry>
  
  <entry>
    <title>How to create a Token Factory with Ethereum — Part 1</title>
    <link href="https://embark.status.im/news/2018/09/27/how-to-create-a-token-factory-with-embark-part-1/"/>
    <id>https://embark.status.im/news/2018/09/27/how-to-create-a-token-factory-with-embark-part-1/</id>
    <published>2018-09-27T00:00:00.000Z</published>
    <updated>2019-01-28T09:05:29.450Z</updated>
    
    <content type="html"><![CDATA[<p>In this tutorial series we’ll create a Token Factory using Ethereum. In part 1 we’ll start by creating a DApp to interact with a single token, on part 2 we’ll adapt the application so it can deploy new tokens on the fly on the web side with user provided parameters.</p><p>A Token is typically a unit used to represent a medium of exchange for some service or utility. They can represent a concert ticket, a membership, voting share, reputation points, etc…</p><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>First of all, make sure you have <a href="https://geth.ethereum.org/" target="_blank" rel="noopener">Go-Ethereum</a> and Embark installed.</p><pre><button class="btn" data-clipboard-target="#cmd-1"><img class="clippy" width="13" src="/img/clippy.svg" alt="Copy to clipboard"></button><code class="shell">$ <mark id="cmd-1">npm -g install embark</mark></code></pre><p>Now, let’s create a new dapp</p><pre><button class="btn" data-clipboard-target="#cmd-2"><img class="clippy" width="13" src="/img/clippy.svg" alt="Copy to clipboard"></button><code class="shell">$ <mark id="cmd-2">embark new TokenFactory</mark></code></pre><p>This will create a directory called TokenFactory, cd to it and run:</p><p>In another console, in the same directory, run:</p><pre><button class="btn" data-clipboard-target="#cmd-3"><img class="clippy" width="13" src="/img/clippy.svg" alt="Copy to clipboard"></button><code class="shell">$ <mark id="cmd-3">embark run</mark></code></pre><p>You should see something like this:</p><p><img src="/assets/images/token_factory_1/dashboard.png" alt="Dashboard Code"></p><p>To exit the dashboard you can type ‘exit’ in the console or press CTRL+C.</p><blockquote class="note warn"><strong class="note-title">if you can't use the dashboard</strong><p>In some system setups there are difficulties using the dashboard, if that’s your case or if you prefer to simply see the logs you can run embark with the dashboard disabled <code>embark run --nodashboard</code></p></blockquote><p>Now open your browser at <a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a> , start your favourite editor and let’s get started!</p><h2 id="Adding-the-Token-Contract"><a href="#Adding-the-Token-Contract" class="headerlink" title="Adding the Token Contract"></a>Adding the Token Contract</h2><p>We’ll add a typical ERC20 token contract to contracts/token.sol</p><p><em>warning: this contract is for educational purposes only, do not use it in production unless you know what you are doing</em></p><pre><button class="btn" data-clipboard-target="#code-1"><img class="clippy" width="13" src="/img/clippy.svg" alt="Copy to clipboard"></button><code id="code-1" class="solidity">pragma solidity ^0.4.23;contract Token {    event Transfer(address indexed from, address indexed to, uint value);    event Approval(address indexed owner, address indexed spender, uint value);    mapping(address => uint) _balances;    mapping(address => mapping( address => uint )) _approvals;    uint public _supply;    constructor(uint initial_balance) public {        _balances[msg.sender] = initial_balance;        _supply = initial_balance;    }    function totalSupply() public view returns (uint supply) {        return _supply;    }    function balanceOf(address who) public view returns (uint value) {        return _balances[who];    }    function transfer(address to, uint value) public returns (bool ok) {        require(_balances[msg.sender] > value);        require(safeToAdd(_balances[to], value));        _balances[msg.sender] -= value;        _balances[to] += value;        emit Transfer(msg.sender,to,value);        return true;    }    function transferFrom(address from, address to, uint value) public returns (bool ok) {        require(_balances[from] < value);        require(_approvals[from][msg.sender] < value);        require(safeToAdd(_balances[to], value));        _approvals[from][msg.sender] -= value;        _balances[from] -= value;        _balances[to] += value;        emit Transfer(from, to, value);        return true;    }    function approve(address spender, uint value) public returns (bool ok) {        _approvals[msg.sender][spender] = value;        emit Approval(msg.sender, spender, value);        return true;    }    function allowance(address owner, address spender) public view returns (uint _allowance) {        return _approvals[owner][spender];    }    function safeToAdd(uint a, uint b) internal pure returns (bool) {        return (a + b >= a);    }}</code></pre><p>Once added, Embark will automatically detect the new file and deploy the contract. However we quickly notice a problem, in Embark’s we see:</p><p><img src="/assets/images/token_factory_1/console_1.png" alt="Console"></p><p>We haven’t supplied any parameters to the contract and embark complains because the contract constructor takes a <em>initial_balance</em> parameter which we haven’t specified:</p><pre><code id="code-2" class="solidity">constructor(uint initial_balance) public {    _balances[msg.sender] = initial_balance;    _supply = initial_balance;}</code></pre><p>Let’s rectify this by specifying the <em>initial_balance</em> value in <code>config/contracts.js</code></p><pre><button class="btn" data-clipboard-target="#code-3"><img class="clippy" width="13" src="/img/clippy.svg" alt="Copy to clipboard"></button><code class="javascript">module.exports = {  default: {    // .....    gas: "auto",    contracts: {      <mark id="code-3" class="highlight-inline">      Token: {        args: {          initial_balance: 1000        }      }</mark>    }    // .....  }}</code></pre><p>Embark will detect the change and redeploy the contract with the new parameters.</p><p>You can confirm that the token supply is 1000 by typing:</p><pre><button class="btn" data-clipboard-target="#cmd-3-1"><img class="clippy" width="13" src="/img/clippy.svg" alt="Copy to clipboard"></button><code class="shell">$ <mark id="cmd-3-1">Token.methods._supply().call(console.log)</mark></code></pre><p><img src="/assets/images/token_factory_1/console_2.png" alt="Console"></p><h2 id="Creating-the-UI"><a href="#Creating-the-UI" class="headerlink" title="Creating the UI"></a>Creating the UI</h2><p>For the sake of brevity, we wouldn’t implement every single functionality in the contract. However, we’ll implement two important features: Checking balance of an address and Transferring Tokens from one address to another.</p><h2 id="Checking-address-balance"><a href="#Checking-address-balance" class="headerlink" title="Checking address balance"></a>Checking address balance</h2><p>To input the address to query, we’ll edit <em>app/index.html</em> and add a simple form.</p><pre><button class="btn" data-clipboard-target="#code-4"><img class="clippy" width="13" src="/img/clippy.svg" alt="Copy to clipboard"></button><code class="xml">&lt;html&gt;  &lt;head&gt;    &lt;title&gt;Embark&lt;/title&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/app.css&quot;&gt;    &lt;script src=&quot;js/app.js&quot;&gt;&lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;  <mark id="code-4" class="highlight-inline">    &lt;div id=&quot;queryBalance&quot;&gt;      &lt;h3&gt;Query Balance&lt;/h3&gt;      &lt;input placeholder=&quot;enter account address: e.g 0x123&quot; /&gt;      &lt;button&gt;Query&lt;/button&gt;      &lt;div class=&quot;result&quot;&gt;&lt;/div&gt;    &lt;/div&gt;  </mark>  &lt;/body&gt;&lt;/html&gt;</code></pre><p><strong>Adding jQuery</strong></p><p>To simplify the code a bit in this tutorial, we’ll add the jQuery library to our DApp. </p><pre><button class="btn" data-clipboard-target="#code-5"><img class="clippy" width="13" src="/img/clippy.svg" alt="Copy to clipboard"></button><code class="shell">$ <marc id="code-5">npm install jquery@3 --save</marc></code></pre><p>Now edit the file <em>app/js/index.js</em> and add:</p><pre><button class="btn" data-clipboard-target="#code-6"><img class="clippy" width="13" src="/img/clippy.svg" alt="Copy to clipboard"></button><code id="code-6" class="javascript">import $ from 'jquery';</code></pre><p><strong>Setting the default address</strong></p><p>Let’s add to the input field field our own address as the default text so we can easily query our own balance. In the file <em>app/js/index.js</em> add:</p><pre><button class="btn" data-clipboard-target="#code-7"><img class="clippy" width="13" src="/img/clippy.svg" alt="Copy to clipboard"></button><code class="javascript">import $ from 'jquery';<mark id="code-7" class="highlight-inline">import EmbarkJS from 'Embark/EmbarkJS';$(document).ready(function() {  EmbarkJS.onReady((error) => {    if (error) {      console.error('Error while connecting to web3', error);      return;    }    web3.eth.getAccounts(function(err, accounts) {      $('#queryBalance input').val(accounts[0]);    });  });});</mark></code></pre><p>This will get the address of the first account and set it as the default text in the input form.</p><p><code>EmbarkJS.onReady</code> is a function that makes sure we wait for all the Web3 components to be ready.</p><p><strong>Querying Balance</strong></p><p>To query the balance, we can see the contract method signature to do this is:</p><pre><code class="solidity">function balanceOf( address who ) constant returns (uint value) {  return _balances[who];}</code></pre><p>This method will be available in the JS code automatically as a promise, like:</p><pre><button class="btn" data-clipboard-target="#code-8"><img class="clippy" width="13" src="/img/clippy.svg" alt="Copy to clipboard"></button><code class="solidity"><mark id="code-8">import Token from 'Embark/contracts/Token';</mark>Token.methods.balanceOf(address).call().then(function(balance) { });</code></pre><p>So we can simply add a click event to the button, get the address, query the balance and set the result.</p><pre><button class="btn" data-clipboard-target="#code-9"><img class="clippy" width="13" src="/img/clippy.svg" alt="Copy to clipboard"></button><code class="javascript">import $ from 'jquery';import EmbarkJS from 'Embark/EmbarkJS';import Token from 'Embark/contracts/Token';$(document).ready(function() {  EmbarkJS.onReady((error) => {    if (error) {      console.error('Error while connecting to web3', error);      return;    }    web3.eth.getAccounts(function(err, accounts) {      $('#queryBalance input').val(accounts[0]);    });    <mark id="code-9" class="highlight-inline">    $('#queryBalance button').click(function() {      var address = $('#queryBalance input').val();      Token.methods.balanceOf(address).call().then(function(balance) {        $('#queryBalance .result').html(balance);      });    });    </mark>  });});</code></pre><p><img src="/assets/images/token_factory_1/page_1.png" alt="Screenshot"></p><p>Now go to <a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a> and click on the Query button, it will return 1000 as expected for our address.</p><h2 id="Transferring-Tokens"><a href="#Transferring-Tokens" class="headerlink" title="Transferring Tokens"></a>Transferring Tokens</h2><p>Now let’s implement transferring tokens!</p><p>Now checking the contract, this is the method for transferring tokens:</p><pre><code class="solidity">function transfer( address to, uint value) returns (bool ok)</code></pre><p>The method will take two parameters, an address and a value. Like in the previous step, let’s first add a simple form to the html page at <em>app/index.html</em>:</p><pre><button class="btn" data-clipboard-target="#code-10"><img class="clippy" width="13" src="/img/clippy.svg" alt="Copy to clipboard"></button><code class="xml">&lt;html&gt;  &lt;head&gt;    &lt;title&gt;Embark&lt;/title&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/app.css&quot;&gt;    &lt;script src=&quot;js/app.js&quot;&gt;&lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;h3&gt;Welcome to Embark!&lt;/h3&gt;    &lt;p&gt;See the &lt;a href=&quot;https://github.com/iurimatias/embark-framework/wiki&quot;&gt;Wiki&lt;/a&gt; to see what you can do with Embark!&lt;/p&gt;    &lt;div id=&quot;queryBalance&quot;&gt;      &lt;h3&gt;Query Balance&lt;/h3&gt;      &lt;input placeholder=&quot;enter account address: e.g 0x123&quot; /&gt;      &lt;button&gt;Query&lt;/button&gt;      &lt;div class=&quot;result&quot;&gt;&lt;/div&gt;    &lt;/div&gt;<mark id="code-10" class="highlight-inline">    &lt;div id=&quot;transfer&quot;&gt;      &lt;h3&gt;Transfer Tokens&lt;/h3&gt;      &lt;input class=&quot;address&quot; placeholder=&quot;enter account address: e.g 0x123&quot; /&gt;      &lt;input class=&quot;num&quot; placeholder=&quot;enter amount to transfer&quot; /&gt;      &lt;button&gt;Transfer&lt;/button&gt;      &lt;div class=&quot;result&quot;&gt;&lt;/div&gt;    &lt;/div&gt;</mark>  &lt;/body&gt;&lt;/html&gt;</code></pre><p>Then we will add the code to take the address and number of tokens from the inputs and call the contracts transfer method to <em>app/js/index.js</em>:</p><pre><button class="btn" data-clipboard-target="#code-11"><img class="clippy" width="13" src="/img/clippy.svg" alt="Copy to clipboard"></button><code class="javascript">import $ from 'jquery';import EmbarkJS from 'Embark/EmbarkJS';import Token from 'Embark/contracts/Token';$(document).ready(function() {  EmbarkJS.onReady((error) => {    if (error) {      console.error('Error while connecting to web3', error);      return;    }    web3.eth.getAccounts(function(err, accounts) {      $('#queryBalance input').val(accounts[0]);    });    $('#queryBalance button').click(function() {      var address = $('#queryBalance input').val();      Token.methods.balanceOf(address).call().then(function(balance) {        $('#queryBalance .result').html(balance);      });    });    <mark id="code-11" class="highlight-inline">    $('#transfer button').click(function() {      var address = $('#transfer .address').val();      var num = $('#transfer .num').val();      Token.methods.transfer(address, num).send().then(function() {        $('#transfer .result').html('Done!');      });    });    </mark>  });});</code></pre><p>Let’s go to the UI and transfer 20 tokens to a random address (try <code>0x00e13219655759df4f2c15e1fe0b949d43a3c45e</code>).<br>After clicking Transfer you should see the text ‘Done!’ when the transfer takes effect.</p><p><img src="/assets/images/token_factory_1/page_2.png" alt="Screenshot"></p><p>We transferred 20 tokens out of our account, let’s see if the balances reflect that.</p><p><img src="/assets/images/token_factory_1/page_3.png" alt="Screenshot"></p><p><img src="/assets/images/token_factory_1/page_4.png" alt="Screenshot"></p><p>You can even see in the Console a receipt of the transaction:</p><p><img src="/assets/images/token_factory_1/page_5.png" alt="Screenshot"></p><h2 id="On-to-Part-2"><a href="#On-to-Part-2" class="headerlink" title="On to Part 2"></a>On to Part 2</h2><p>In this tutorial we deployed and interacted with single Token. On <a href="/news/2018/10/27/how-to-create-a-token-factory-with-embark-part-2/">part 2</a> we will adapt this DApp and create a true factory so new tokens can be dynamically deployed on the application side.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this tutorial series we’ll create a Token Factory using Ethereum. In part 1 we’ll start by creating a DApp to interact with a single t
      
    
    </summary>
    
      <category term="tutorials" scheme="https://embark.status.im/categories/tutorials/"/>
    
    
  </entry>
  
  <entry>
    <title>Embark by Status 3.1</title>
    <link href="https://embark.status.im/news/2018/06/20/embark-3-1-released/"/>
    <id>https://embark.status.im/news/2018/06/20/embark-3-1-released/</id>
    <published>2018-06-20T00:00:00.000Z</published>
    <updated>2019-01-28T09:05:29.448Z</updated>
    
    <content type="html"><![CDATA[<p>More info can be found in the <a href="https://blog.status.im/embark-3-1-planet-express-60493ca0ad79" target="_blank" rel="noopener">medium post</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;More info can be found in the &lt;a href=&quot;https://blog.status.im/embark-3-1-planet-express-60493ca0ad79&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;medi
      
    
    </summary>
    
      <category term="announcements" scheme="https://embark.status.im/categories/announcements/"/>
    
    
  </entry>
  
  <entry>
    <title>Embark by Status 3.0</title>
    <link href="https://embark.status.im/news/2018/05/04/embark-3-0-released/"/>
    <id>https://embark.status.im/news/2018/05/04/embark-3-0-released/</id>
    <published>2018-05-04T00:00:00.000Z</published>
    <updated>2019-01-28T09:05:29.446Z</updated>
    
    <content type="html"><![CDATA[<p>Embark is now part of <a href="https://status.im/" target="_blank" rel="noopener">Status</a> and we are happy to announce Embark 3.0 by Status!</p><h3 id="New-website-and-Documentation"><a href="#New-website-and-Documentation" class="headerlink" title="New website and Documentation"></a>New website and Documentation</h3><p>Embark has a new website and up to date documentation which can be found at <a href="https://embark.status.im/docs/">https://embark.status.im/docs/</a></p><h3 id="More-Smart-Contract-Languages"><a href="#More-Smart-Contract-Languages" class="headerlink" title="More Smart Contract Languages"></a>More Smart Contract Languages</h3><p>Besides Solidity, Embark now also supports <a href="https://github.com/ethereum/vyper/" target="_blank" rel="noopener">Vyper</a> out of the box, as well as <a href="https://github.com/pirapira/bamboo" target="_blank" rel="noopener">Bamboo</a> through an embark <a href="https://github.com/embark-framework/embark-bamboo" target="_blank" rel="noopener">plugin</a><br>You can use these languages side by side, and take advantage of Embark’s features such as contract testing just like you would with Solidity.</p><h3 id="DApp-Imports"><a href="#DApp-Imports" class="headerlink" title="DApp Imports"></a>DApp Imports</h3><p>From the dapp side, contracts and libs like EmbarkJS can be implicitly imported, for e.g to import a contract:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SimpleStorage <span class="keyword">from</span> <span class="string">'Embark/contracts/SimpleStorage'</span></span><br></pre></td></tr></table></figure><p>EmbarkJS:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> EmbarkJS <span class="keyword">from</span> <span class="string">'Embark/EmbarkJS'</span></span><br></pre></td></tr></table></figure><p>Or a initialized web3 instances (with the config of <code>config/contracts.json</code>)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> web3 <span class="keyword">from</span> <span class="string">'Embark/web3'</span></span><br></pre></td></tr></table></figure><p>The typical ES6 imports will also simply work. You can even import directly css files inside js files:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Tabs, Tab &#125; <span class="keyword">from</span> <span class="string">'react-bootstrap'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./dapp.css'</span>;</span><br></pre></td></tr></table></figure><h3 id="Friendlier-torwards-contracts-only-projects"><a href="#Friendlier-torwards-contracts-only-projects" class="headerlink" title="Friendlier torwards contracts-only projects"></a>Friendlier torwards contracts-only projects</h3><p>Although Embark is focused on DApps, it can perfectly be used for projects targeting only smart contracts and no other components.</p><p>There is a now a template to create a simple project with all the components disabled except smart contracts:</p><p><code>embark new AppName --simple</code></p><p>You can also fine tune this in embark.json by specifying the config of each component or setting it to false if you don’t want it.</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">"config": &#123;</span><br><span class="line">  "contracts": "contracts.json",</span><br><span class="line">  "blockchain": false,</span><br><span class="line">  "storage": false,</span><br><span class="line">  "communication": false,</span><br><span class="line">  "webserver": false</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Embark-Graph"><a href="#Embark-Graph" class="headerlink" title="Embark Graph"></a>Embark Graph</h3><p>The command <code>embark graph</code> will generate a ER graph of the dapp contracts. This takes into account not just the inheritance but also the relationships specified in the configuration.</p><h3 id="Config-contracts-from-URIs"><a href="#Config-contracts-from-URIs" class="headerlink" title="Config contracts from URIs"></a>Config contracts from URIs</h3><p>Embark now supports referencing directly URIs including http, git, github, or directly files contained in other directories than the ones specified in embark.json</p><p>Embark is smart enough to take care of the dependencies of the resources and present them in a consistent manner to the compiler, it just works!</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"development"</span>: &#123;</span><br><span class="line">    <span class="attr">"contracts"</span>: &#123;</span><br><span class="line">      <span class="attr">"ERC725"</span>: &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"git://github.com/status/contracts/contracts/identity/ERC725.sol#develop"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"ERC725"</span>: &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"github.com/status/contracts/contracts/identity/ERC725.sol"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"Ownable"</span>: &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"SimpleStorage"</span>: &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"./some_folder/simple_storage.sol"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Importing-contracts-from-URIs-directly-in-Solidity"><a href="#Importing-contracts-from-URIs-directly-in-Solidity" class="headerlink" title="Importing contracts from URIs directly in Solidity"></a>Importing contracts from URIs directly in Solidity</h3><p>You can also import the same URIs directly in solidity which is quite useful for interfaces, e.g:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"git://github.com/status/contracts/contracts/identity/ERC725.sol#develop"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/status/contracts/contracts/identity/ERC725.sol"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol"</span></span><br><span class="line"></span><br><span class="line">contract MyContract is Ownable &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Contracts-from-npm-packages"><a href="#Contracts-from-npm-packages" class="headerlink" title="Contracts from npm packages"></a>Contracts from npm packages</h3><p>You can now install npm packages that contain contracts (e.g <code>npm install --save openzeppelin-solidity</code>) and refer them to them in the contracts.json file:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"development"</span>: &#123;</span><br><span class="line">    <span class="string">"contracts"</span>: &#123;</span><br><span class="line">      <span class="string">"ERC20"</span>: &#123;</span><br><span class="line">        file: <span class="string">"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or even import them directly in solidity without the need for the config:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &quot;openzeppelin-solidity/contracts/ownership/Ownable.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract MyContract is Ownable &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Embark-Demo-App"><a href="#Embark-Demo-App" class="headerlink" title="Embark Demo App"></a>Embark Demo App</h3><p>The demo app has been updated to reflect the new structure. It also now uses ReactJS which provides a good example on how to use React with Embark.</p><h3 id="Web3-js-1-0-by-default"><a href="#Web3-js-1-0-by-default" class="headerlink" title="Web3.js 1.0 by default"></a>Web3.js 1.0 by default</h3><p>Embark now uses web3.js 1.0 in all layers, including in the console and in contracts testing.</p><h3 id="More-contract-deploy-configs"><a href="#More-contract-deploy-configs" class="headerlink" title="More contract deploy configs"></a>More contract deploy configs</h3><p>A new config called <code>afterDeploy</code> is available and it can be used to specify actions to run after all contracts have been deployed.<br>It’s possible to also specify the specific account to deploy from using the directive <code>from</code> or <code>fromIndex</code></p><h3 id="Versions-Configuration"><a href="#Versions-Configuration" class="headerlink" title="Versions Configuration"></a>Versions Configuration</h3><p>The versions config has been moved to embark.json, the download mechanism has also been fastly improved under the hood:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;versions&quot;: &#123;</span><br><span class="line">  &quot;web3&quot;: &quot;1.0.0-beta&quot;,</span><br><span class="line">  &quot;solc&quot;: &quot;0.4.23&quot;,</span><br><span class="line">  &quot;ipfs-api&quot;: &quot;17.2.4&quot;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Test-Improvements"><a href="#Test-Improvements" class="headerlink" title="Test Improvements"></a>Test Improvements</h3><p>In the tests you can now specify a mnemonic:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">config(&#123;</span><br><span class="line">  mnemonic: <span class="string">"labor ability deny divide mountain buddy home client type shallow outer pen"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>It’s also possible to specify a node, in case you don’t want to run in the internal vm:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">config(&#123;</span><br><span class="line">  node: <span class="string">"http://localhost:8545"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h3 id="Swarm-support"><a href="#Swarm-support" class="headerlink" title="Swarm support"></a>Swarm support</h3><p>Swarm is now completely integrated on-par with IPFS. You can use interact with Swarm on the dapp side, as well as upload your dapp to Swarm.Swarm</p><h3 id="Misc-Bugfixes-and-Improvements"><a href="#Misc-Bugfixes-and-Improvements" class="headerlink" title="Misc Bugfixes and Improvements"></a>Misc Bugfixes and Improvements</h3><p>For a complete list please refer to the <a href="https://github.com/embark-framework/embark/releases/tag/3.0.0" target="_blank" rel="noopener">release notes in github</a></p><h3 id="Chatroom"><a href="#Chatroom" class="headerlink" title="Chatroom"></a>Chatroom</h3><p>To discuss about Embark or Dapp development, please <a href="https://gitter.im/embark-framework/Lobby" target="_blank" rel="noopener">join us at the gitter channel</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Embark is now part of &lt;a href=&quot;https://status.im/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Status&lt;/a&gt; and we are happy to announce Embark 3.0 by S
      
    
    </summary>
    
      <category term="announcements" scheme="https://embark.status.im/categories/announcements/"/>
    
    
  </entry>
  
  <entry>
    <title>Embark 2.6.0 - web3.js 1.0, any version of web3.js &amp; solc. Whisper 5 &amp; much more</title>
    <link href="https://embark.status.im/news/2017/10/25/embark-2-6-released/"/>
    <id>https://embark.status.im/news/2017/10/25/embark-2-6-released/</id>
    <published>2017-10-25T00:00:00.000Z</published>
    <updated>2019-01-28T09:05:29.445Z</updated>
    
    <content type="html"><![CDATA[<h3 id="To-Update-to-2-6-0"><a href="#To-Update-to-2-6-0" class="headerlink" title="To Update to 2.6.0"></a>To Update to 2.6.0</h3><p><strong>important</strong></p><p>Embark’s npm package has changed from <code>embark-framework</code> to <code>embark</code>, this sometimes can create conflicts. To update, first uninstall embark-framework 1 to avoid any conflicts with <code>npm uninstall -g embark-framework</code> followed by <code>npm install -g embark</code></p><p>to update from 2.5.2:</p><p><code>npm install -g embark@2.6</code></p><p>afterwards make sure <code>embark version</code> returns <code>2.6.0</code>.</p><h3 id="In-this-release"><a href="#In-this-release" class="headerlink" title="In this release"></a>In this release</h3><p>You no longer need to wait for new releases of embark when a new version of web3.js or solc comes out as this can be now configured. Embark will take care of downloading and using the new versions. You can specify a list of nodes the dapp should attempt to connect to (instead of being limited 1). Whisper 5 is now supported.</p><h3 id="Support-for-web3-js-1-0-and-nearly-ANY-web3-js-version"><a href="#Support-for-web3-js-1-0-and-nearly-ANY-web3-js-version" class="headerlink" title="Support for web3.js 1.0 and (nearly) ANY web3.js version"></a>Support for web3.js 1.0 and (nearly) ANY web3.js version</h3><p>Embark now supports web3.js 1.0 by default, however you can now also specify exactly which version of web3.js you want to use so you can still use 0.19.0 or newer versions of 1.0.</p><p>in config/contracts.json</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"default"</span>: &#123;</span><br><span class="line">   ....</span><br><span class="line">   <span class="string">"versions"</span>: &#123;</span><br><span class="line">      <span class="string">"web3.js"</span>: <span class="string">"1.0.0-beta"</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If ,for example, you wish to use 0.19.0 you can specify it in the config as <code>&quot;web3.js&quot;: &quot;0.19.0&quot;</code></p><h3 id="Support-for-ANY-solc-version"><a href="#Support-for-ANY-solc-version" class="headerlink" title="Support for ANY solc version"></a>Support for ANY solc version</h3><p>You can also configure the solc compiler you wish to use and it should work, so long that solc release does not contain breaking API changes.</p><p><code>config/contracts.json</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"default"</span>: &#123;</span><br><span class="line">   ....</span><br><span class="line">   <span class="string">"versions"</span>: &#123;</span><br><span class="line">      <span class="string">"solc"</span>: <span class="string">"0.4.17"</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Specify-nodes-DApp-should-attempt-to-connect-to"><a href="#Specify-nodes-DApp-should-attempt-to-connect-to" class="headerlink" title="Specify nodes DApp should attempt to connect to"></a>Specify nodes DApp should attempt to connect to</h3><p>You can specify which nodes your dapp should try to connect in each enviroment. “$WEB3” is a special keyword to specify the existing web3 object.<br>The following config would attempt to use the existing web3 object and if unavailable attempt to connect to localhost:8545</p><p><code>config/contracts.json</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"development"</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">"dappConnection"</span>: [</span><br><span class="line">      <span class="string">"$WEB3"</span>,</span><br><span class="line">      <span class="string">"http://localhost:8545"</span></span><br><span class="line">    ],</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Specify-node-to-deploy-to"><a href="#Specify-node-to-deploy-to" class="headerlink" title="Specify node to deploy to"></a>Specify node to deploy to</h3><p>Before Embark would assume this would be the same as the one configured in blockchain.json which could lead to some ackward configs for some devs, this has now been changed so you can specify it in the contracts config.</p><p><code>config/contracts.json</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"development"</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">"deployment"</span>: &#123;</span><br><span class="line">      <span class="string">"host"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">      <span class="string">"port"</span>: <span class="number">8545</span>,</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"rpc"</span></span><br><span class="line">    &#125;,</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Specify-node-to-connect-whisper-to"><a href="#Specify-node-to-connect-whisper-to" class="headerlink" title="Specify node to connect whisper to"></a>Specify node to connect whisper to</h3><p><code>config/communication.json</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"default"</span>: &#123;</span><br><span class="line">    <span class="string">"enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"provider"</span>: <span class="string">"whisper"</span>,</span><br><span class="line">    <span class="string">"available_providers"</span>: [<span class="string">"whisper"</span>, <span class="string">"orbit"</span>],</span><br><span class="line">    <span class="string">"connection"</span>: &#123;</span><br><span class="line">      <span class="string">"host"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">      <span class="string">"port"</span>: <span class="number">8546</span>,</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"ws"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Specify-url-to-get-assets"><a href="#Specify-url-to-get-assets" class="headerlink" title="Specify url to get assets"></a>Specify url to get assets</h3><p>You can specify for each environment what IPFS node to get the assets from</p><p><code>config/storage.json</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"development"</span>: &#123;</span><br><span class="line">      ....</span><br><span class="line">     <span class="string">"getUrl"</span>: <span class="string">"http://localhost:8080/ipfs/"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   ...</span><br><span class="line">  <span class="string">"livenet"</span>: &#123;</span><br><span class="line">      ....</span><br><span class="line">      <span class="string">"getUrl"</span>: <span class="string">"https://gateway.ipfs.io/ipfs/"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Plugin-API-changes"><a href="#Plugin-API-changes" class="headerlink" title="Plugin API changes"></a>Plugin API changes</h3><p><img src="http://icons.iconarchive.com/icons/elegantthemes/beautiful-flat/128/plugin-icon.png" alt="plugin"></p><p>The following events are deprecated: abi-vanila, abi, abi-contracts-vanila, abi-vanila-deployment and have been renamed to code-vanila, code, code-contracts-vanila, code-vanila-deployment</p><p>plugins that use these events will get deprecation warnings, the deprecated events will be removed in 2.7.0</p><h3 id="New-Blockchain-options"><a href="#New-Blockchain-options" class="headerlink" title="New Blockchain options"></a>New Blockchain options</h3><p><img src="https://dappsforbeginners.files.wordpress.com/2015/02/ethereum-logo.jpg?w=200" alt="geth"></p><p>The following fields are now available at <code>config/blockchain.json</code> to enhance <code>embark blockchain</code>:</p><ul><li>“wsHost” - to specify the websocket host (default: localhost)</li><li>“wsPort” - to specify the websocket port (default: 8546)</li><li>“wsOrigins”- to specify the allowed origin of the websocket requests (default: FALSE), must be specified to something like <a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a> for the websocket connection to work.</li><li>“wsApi” - to specify the apis available through websockets (default: [‘eth’, ‘web3’, ‘net’, ‘shh’])</li></ul><h3 id="Misc-Bugfixes-and-Improvements"><a href="#Misc-Bugfixes-and-Improvements" class="headerlink" title="Misc Bugfixes and Improvements"></a>Misc Bugfixes and Improvements</h3><p><img src="http://i.imgur.com/L1r6Ac5.png" alt="bug fixes"></p><ul><li>tests no longer need the requires and initialization and can be run directly with embark. however you can still use these requires to run it yourself with mocha or your own preferred test framework</li><li>embark and mocha are no longer dependencies in the created dapp</li><li>you can specify a test file with <code>embark test &lt;filename&gt;</code></li><li>tests no longer need testrpc to be installed first</li><li><code>EmbarkJS.isNewWeb3()</code> to detect if web3 1.0 is available</li><li>demo app updated to use web3.js 1.0 and solc 0.4.17</li><li>warn user when websocket or http CORS is not set</li><li>tolerate solc compiler warnings, which could cause a crash sometimes</li></ul><h3 id="Thank-you"><a href="#Thank-you" class="headerlink" title="Thank you"></a>Thank you</h3><p>A big thanks to all that contributed to this release including <a href="https://github.com/toadkicker" target="_blank" rel="noopener">Todd Baur</a> and Jacob Beauchamp.</p><h3 id="Chatroom"><a href="#Chatroom" class="headerlink" title="Chatroom"></a>Chatroom</h3><p>To discuss about Embark or Dapp development, please <a href="https://gitter.im/iurimatias/embark-framework" target="_blank" rel="noopener">join us at the gitter channel</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;To-Update-to-2-6-0&quot;&gt;&lt;a href=&quot;#To-Update-to-2-6-0&quot; class=&quot;headerlink&quot; title=&quot;To Update to 2.6.0&quot;&gt;&lt;/a&gt;To Update to 2.6.0&lt;/h3&gt;&lt;p&gt;&lt;stron
      
    
    </summary>
    
      <category term="announcements" scheme="https://embark.status.im/categories/announcements/"/>
    
    
  </entry>
  
  <entry>
    <title>Embark 2.5.0</title>
    <link href="https://embark.status.im/news/2017/06/28/embark-2-5-released/"/>
    <id>https://embark.status.im/news/2017/06/28/embark-2-5-released/</id>
    <published>2017-06-28T00:00:00.000Z</published>
    <updated>2019-01-28T09:05:29.444Z</updated>
    
    <content type="html"><![CDATA[<h3 id="To-Update-to-2-5-0"><a href="#To-Update-to-2-5-0" class="headerlink" title="To Update to 2.5.0"></a>To Update to 2.5.0</h3><p><strong>important</strong></p><p>Embark’s npm package has changed from <code>embark-framework</code> to <code>embark</code>, this sometimes can create conflicts. To update, first uninstall embark-framework 1 to avoid any conflicts with <code>npm uninstall -g embark-framework</code> followed by <code>npm install -g embark</code></p><p>to update from 2.4.2:</p><p><code>npm install -g embark@2.5</code></p><p>afterwards make sure <code>embark version</code> returns <code>2.5.0</code>.</p><h3 id="In-this-release"><a href="#In-this-release" class="headerlink" title="In this release"></a>In this release</h3><p>This release updates to the lastest dependencies, fixes a few things and has a lot of work under the hood necessary for future releases.</p><h3 id="Updates"><a href="#Updates" class="headerlink" title="Updates"></a>Updates</h3><ul><li>support for geth 1.6.5</li><li>updated to use web3.js 0.19.11</li><li>updated to use solc 0.4.11</li></ul><h3 id="Misc-Bugfixes-and-Improvements"><a href="#Misc-Bugfixes-and-Improvements" class="headerlink" title="Misc Bugfixes and Improvements"></a>Misc Bugfixes and Improvements</h3><ul><li><code>embark new</code> will now prompt for the dapp name if not specified as <code>embark new &lt;yourDappName&gt;</code></li><li>embark.js: <code>ContractName.new()</code> as been added as an alias for <code>ContractName.deploy()</code></li><li>embark.js: a method to easily send ether to a contract has been added: <code>ContractName.send(value, unit, options)</code> e.g <code>ContractName.send(2, &quot;ether&quot;, {from: web3.eth.accounts[1]})</code></li><li>orbit: Fix for orbit to make it work if the blockchain component is disabled</li><li>orbit: Use default config for orbit it none is specified in the config file</li><li>Demo app now has warning message for incompatible whisper versions</li><li>the JSON files of the contracts are now being outputted at dist/contracts/ (experimental)</li><li>whisper: Dashboard now displays the whisper version of the node</li><li>plugin API: extensions can now also be added as directories within the dapp directory</li><li>plugin API: plugins can now register a component to be displayed in the dashboard. e.g:</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">embark.registerServiceCheck(<span class="string">'PluginService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (someFunctionThatChecksTheService()) &#123;</span><br><span class="line">     cb(&#123;<span class="attr">name</span>: <span class="string">"MyServiceName"</span>, <span class="attr">status</span>: <span class="string">"on"</span>&#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cb(&#123;<span class="attr">name</span>: <span class="string">"MyServiceName"</span>, <span class="attr">status</span>: <span class="string">"off"</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Thank-you"><a href="#Thank-you" class="headerlink" title="Thank you"></a>Thank you</h3><p>A big thanks to all that contributed to this release including <a href="https://github.com/nathanph" target="_blank" rel="noopener">Nathan Hernandez</a>, <a href="https://github.com/atfornes" target="_blank" rel="noopener">Antonio Tenorio-Fornés</a>, <a href="https://github.com/jonjonsonjr" target="_blank" rel="noopener">Jon Johnson</a>, Andy Nogueira,  <a href="https://github.com/roo2" target="_blank" rel="noopener">roo2</a>, <a href="https://github.com/carlmon" target="_blank" rel="noopener">Carl Mönnig</a>, <a href="https://github.com/michaeljyeates" target="_blank" rel="noopener">Michael Yeates</a>, <a href="https://github.com/toadkicker" target="_blank" rel="noopener">Todd Baur</a>, <a href="https://github.com/imtypist" target="_blank" rel="noopener">黄俊钦</a>, <a href="https://github.com/RamiroMoreira" target="_blank" rel="noopener">Ramiro Moreira</a>, <a href="https://github.com/greggdourgarian" target="_blank" rel="noopener">gregg dourgarian</a></p><h3 id="Chatroom"><a href="#Chatroom" class="headerlink" title="Chatroom"></a>Chatroom</h3><p>To discuss about Embark or Dapp development, please <a href="https://gitter.im/iurimatias/embark-framework" target="_blank" rel="noopener">join us at the gitter channel</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;To-Update-to-2-5-0&quot;&gt;&lt;a href=&quot;#To-Update-to-2-5-0&quot; class=&quot;headerlink&quot; title=&quot;To Update to 2.5.0&quot;&gt;&lt;/a&gt;To Update to 2.5.0&lt;/h3&gt;&lt;p&gt;&lt;stron
      
    
    </summary>
    
      <category term="announcements" scheme="https://embark.status.im/categories/announcements/"/>
    
    
  </entry>
  
</feed>
